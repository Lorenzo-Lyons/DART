#!/usr/bin/env python
PACKAGE = "dynamic_reconfigure_pkg"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


#gen.add("dt_int", double_t, 0, "target path velocity", 0.01, 0.001,   0.1)
gen.add("reset_state",   bool_t,   0, "A Boolean parameter to reset the state",  False)
gen.add("reset_state_x", double_t, 0, "X position to reset to", -1.5, -10,   10)
gen.add("reset_state_y", double_t, 0, "Y position to reset to", -2.7, -10,   10)
gen.add("reset_state_theta", double_t, 0, "Orientation to reset to in radians", 0.0, -3.15,   3.15)
gen.add("actuator_dynamics",   bool_t,   0, "account for actuator dynamics",  False)
gen.add("disturbance",   bool_t,   0, "add disturbance or not",  False)

# the string chosen to show up must not contain spaces
model_choice_enum = gen.enum([gen.const("Kinematic_bicycle",int_t, 1, "sets the dynamic model to kinematic bicycle"),
gen.const("Dynamic_bicycle",     int_t, 2, "sets the dynamic model to dynamic bycicle"),
gen.const("SVGP_dynamic_bicycle",     int_t, 3, "sets the dynamic model to SVGP + dynamic bycicle as a nominal model")],
"An enum to set dynamic model")
# --------------------                                                            these numbers are: default value, min, max value
gen.add("dynamic_model_choice", int_t, 0, "Model choice which is edited via an enum", 1, 1, 3, edit_method=model_choice_enum) # was 2,1,2




# disturbance_choice_enum = gen.enum([gen.const("None",int_t, 1, "no disturbance"),
# gen.const("Truncated_Gaussian",     int_t, 2, "disturbance is a truncated Gaussian"),
# gen.const("Flat",     int_t, 3, "disturbance is a flat distribution")],
# "An enum to set disturbance")
# # --------------------                                                            these numbers are: default value, min, max value
# gen.add("disturbance_choice", int_t, 0, "Disturbance choice which is edited via an enum", 1, 1, 3, edit_method=disturbance_choice_enum) # was 2,1,2

# bound_trunc_choice_enum = gen.enum([
#     gen.const("Low", int_t, 1, "Low disturbance"),
#     gen.const("Medium", int_t, 2, "Medium disturbance"),
#     gen.const("High", int_t, 3, "High disturbance")
# ], "An enum to set the value of the truncated Gaussian disturbance")
# # -------------------- 
# gen.add("trunc_type", int_t, 0, "Truncated Gaussian disturbance type choice which is edited via an enum", 1, 1, 3, edit_method=bound_trunc_choice_enum)

# bound_flat_choice_enum = gen.enum([gen.const("Low", int_t, 1, "Low disturbance"),
# gen.const("Medium", int_t, 2, "Medium disturbance"),
# gen.const("High", int_t, 3, "High disturbance")],
# "An enum to set the value of the flat disturbance")
# # -------------------- 
# gen.add("flat_type", int_t, 0, "Flat disturbance type choice which is edited via an enum", 1, 1, 3, edit_method=bound_flat_choice_enum)


exit(gen.generate(PACKAGE, "dynamic_reconfigure_pkg", "dart_simulator_gui"))

# templates
#gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
#gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
#gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
#gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)

#size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#gen.const("Medium",     int_t, 1, "A medium constant"),
#gen.const("Large",      int_t, 2, "A large constant"),
#gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#"An enum to set size")
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

